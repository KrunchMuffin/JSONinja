# .github/workflows/release.yml
name: Build and Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.1.0)'
        required: true
        type: string

env:
  APP_NAME: JSONinja
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  create-release:
    runs-on: ubuntu-latest
    outputs:
      release_id: ${{ steps.create_release.outputs.id }}
      release_upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get version
        id: get_version
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION=${GITHUB_REF#refs/tags/}
          fi
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "Version: ${VERSION}"

      - name: Generate changelog
        id: changelog
        run: |
          # Extract changelog for this version
          VERSION="${{ steps.get_version.outputs.version }}"
          if [ -f "CHANGELOG.md" ]; then
            # Get content between this version and previous version
            awk '/^## \['"${VERSION#v}"'\]/, /^## \[/ {if(/^## \[/ && NR>1 && !/^## \['"${VERSION#v}"'\]/) exit; if(!/^## \['"${VERSION#v}"'\]/) print}' CHANGELOG.md > release_notes.md

            # If no specific notes found, use a default
            if [ ! -s release_notes.md ]; then
              echo "### What's New in ${VERSION}" > release_notes.md
              echo "" >> release_notes.md
              echo "See full changelog for details." >> release_notes.md
            fi
          else
            echo "Release ${VERSION}" > release_notes.md
          fi

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ steps.get_version.outputs.version }}
          release_name: ${{ env.APP_NAME }} ${{ steps.get_version.outputs.version }}
          body_path: release_notes.md
          draft: true
          prerelease: false

  build-windows:
    needs: create-release
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build Windows
        run: npm run build-win

      - name: Upload Windows Installer
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ needs.create-release.outputs.release_upload_url }}
          asset_path: dist/JSONinja-Setup-${{ needs.create-release.outputs.version }}-x64.exe
          asset_name: JSONinja-Setup-${{ needs.create-release.outputs.version }}-x64.exe
          asset_content_type: application/octet-stream

      - name: Upload Windows Portable
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ needs.create-release.outputs.release_upload_url }}
          asset_path: dist/JSONinja-Portable-${{ needs.create-release.outputs.version }}-x64.exe
          asset_name: JSONinja-Portable-${{ needs.create-release.outputs.version }}-x64.exe
          asset_content_type: application/octet-stream

  build-macos:
    needs: create-release
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build macOS (unsigned)
        run: npm run build-mac
        env:
          CSC_IDENTITY_AUTO_DISCOVERY: false

      - name: Upload macOS DMG
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ needs.create-release.outputs.release_upload_url }}
          asset_path: dist/JSONinja-${{ needs.create-release.outputs.version }}-x64.dmg
          asset_name: JSONinja-${{ needs.create-release.outputs.version }}-x64.dmg
          asset_content_type: application/octet-stream

  build-linux:
    needs: create-release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libnss3-dev libatk-bridge2.0-dev libdrm2 libxcomposite1 libxdamage1 libxrandr2 libgbm1 libxss1 libasound2-dev

      - name: Build Linux
        run: npm run build-linux

      - name: Upload AppImage
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ needs.create-release.outputs.release_upload_url }}
          asset_path: dist/JSONinja-${{ needs.create-release.outputs.version }}-x64.AppImage
          asset_name: JSONinja-${{ needs.create-release.outputs.version }}-x64.AppImage
          asset_content_type: application/octet-stream

  finalize-release:
    needs: [create-release, build-windows, build-macos, build-linux]
    runs-on: ubuntu-latest
    steps:
      - name: Publish Release
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: ${{ needs.create-release.outputs.release_id }},
              draft: false
            });
